AWSTemplateFormatVersion: '2010-09-09'
Description: This stack creates API Gateway
Parameters:
  Environment:
    Type: String
    Description: Environment Name (DEV/QA)
    AllowedValues: ['DEV', 'QA']
  Platform:
    Type: String
    Default: 'TEST-SERVICES'
    Description: Platform Name
  LambdaStackName:
    Type: String
    Description: Name of the stack used to create Lambda functions
  LoadBalancerStackName:
    Type: String
    Description: Name of the stack used to create Load balancer
Resources:
  # Create API Gateway
  ApiGatewayApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${Environment}-${Platform}-API-GW-01'
      Description: API Gateway with Lambda authorizer
      EndpointConfiguration:
        Types:
          - EDGE
  # Create token resource
  ApiGatewayTokenResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayApi
      ParentId: !GetAtt ApiGatewayApi.RootResourceId
      PathPart: token
  # Add post method to token resource
  ApiGatewayTokenMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayApi
      ResourceId: !Ref ApiGatewayTokenResource
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations'
          - LambdaArn:
              Fn::ImportValue: !Join [':', [!Ref 'LambdaStackName', 'TokenGenFunctionArn']]
  # Give API Gateway permission to invoke Token Gen Lambda function
  TokenGenFunctionApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Fn::ImportValue: !Join [':', [!Ref 'LambdaStackName', 'TokenGenFunctionArn']]
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayApi}/*/*/*"
  # Create API Gateway Authorizer
  RestApiAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: APi-GW-AUTHORIZER
      AuthorizerCredentials:
        Fn::ImportValue: !Join [':', [!Ref 'LambdaStackName', 'ApiGWAuthorizerRoleArn']]
      AuthorizerUri: !Sub
        - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations'
        - LambdaArn:
            Fn::ImportValue: !Join [':', [!Ref 'LambdaStackName', 'TokenValidatorFunctionArn']]
      AuthorizerResultTtlInSeconds: 1800
      Type: REQUEST
      IdentitySource: 'method.request.header.token'
      RestApiId: !Ref ApiGatewayApi
  # Give API Gateway permission to invoke Token Validator Lambda function
  TokenValidatorFunctionApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Fn::ImportValue: !Join [':', [!Ref 'LambdaStackName', 'TokenValidatorFunctionArn']]
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayApi}/*/*/*"
  # Create proxy resource
  ApiGatewayProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayApi
      ParentId: !GetAtt ApiGatewayApi.RootResourceId
      PathPart: '{proxy+}'
  # Create ANY method for proxy resource
  ApiGatewayProxyAnyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayApi
      ResourceId: !Ref ApiGatewayProxyResource
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref RestApiAuthorizer
      HttpMethod: ANY
      RequestParameters:
        method.request.path.proxy: true
      Integration:
        IntegrationHttpMethod: ANY
        Type: HTTP_PROXY
        Uri: !Sub
          - 'http://${AlbDns}/{proxy}'
          - AlbDns:
              Fn::ImportValue: !Join [':', [!Ref 'LoadBalancerStackName', 'LoadBalancerDNS']]
        TimeoutInMillis: 29000
        CacheKeyParameters:
          - 'method.request.path.proxy'
        RequestParameters:
          integration.request.path.proxy: 'method.request.path.proxy'
          integration.request.header.authuid: 'context.authorizer.principalId'
  # Create deployment with token post method and proxy any method
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGatewayTokenMethod
      - ApiGatewayProxyAnyMethod
    Properties:
      RestApiId: !Ref ApiGatewayApi
      Description: API Gateway Deployment
  # Create stage
  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: 'DEV'
      Description: API Gateway DEV stage
      RestApiId: !Ref ApiGatewayApi
      DeploymentId: !Ref ApiGatewayDeployment